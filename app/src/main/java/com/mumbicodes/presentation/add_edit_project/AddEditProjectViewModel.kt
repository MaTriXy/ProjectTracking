package com.mumbicodes.presentation.add_edit_project

import androidx.compose.runtime.State
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.mumbicodes.domain.model.Project
import com.mumbicodes.domain.use_case.projects.ProjectsUseCases
import com.mumbicodes.presentation.util.PROJECT_ID
import com.mumbicodes.presentation.util.convertDateFormatsStrings
import com.mumbicodes.presentation.util.convertDateToString
import com.mumbicodes.presentation.util.convertLocalDateToLong
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.launch
import java.time.LocalDate
import javax.inject.Inject

/**
 * With Hilt, you can inject automatically savedStateHandle that has nav args
 * */
@HiltViewModel
class AddEditProjectViewModel @Inject constructor(
    private val projectsUseCases: ProjectsUseCases,
    private val savedStateHandle: SavedStateHandle,
) : ViewModel() {

    private val _projectNameState = mutableStateOf("")
    val projectNameState = _projectNameState

    private val _projectDescState = mutableStateOf("")
    val projectDescState = _projectDescState

    // format displayed in the inout field
    private val _projectDeadlineState = mutableStateOf("")
    val projectDeadlineState: State<String> = _projectDeadlineState

    // format stored in the database
    private val projectDeadlineStateDb = mutableStateOf("")

    private val _isCalendarVisible = mutableStateOf(false)
    val isCalendarVisible = _isCalendarVisible

    private val _uiEvents = MutableSharedFlow<UIEvents>()
    val uiEvents = _uiEvents

    // Since it's autogenerated, the insert method treats 0 as not set while inserting the project
    private var currentProjectId: Int = 0

    // Default project status is "Not Started" since it doesn't have any milestones
    private var currentProjectStatus: String = "Not Started"

    var passedProjectId: Int? = savedStateHandle.get<Int>(PROJECT_ID)

    // We pass -1 as the arg when creating a new project
    init {
        savedStateHandle.get<Int>(PROJECT_ID)?.let { projectId ->
            if (projectId != -1) {
                viewModelScope.launch {
                    projectsUseCases.getProjectByIdUseCase(projectId).also { projectPassed ->
                        currentProjectId = projectPassed.projectId
                        _projectNameState.value = projectPassed.projectName
                        _projectDescState.value = projectPassed.projectDesc
                        _projectDeadlineState.value =
                            convertDateFormatsStrings(
                                projectPassed.projectDeadline,
                                "dd MMM yyyy",
                                "dd/MM/yyyy"
                            )
                        currentProjectStatus = projectPassed.projectStatus
                    }
                }
            }
        }
    }

    fun onEvent(addEditProjectEvents: AddEditProjectEvents) {
        when (addEditProjectEvents) {
            is AddEditProjectEvents.NameChanged -> {
                _projectNameState.value = addEditProjectEvents.value
            }
            is AddEditProjectEvents.DescriptionChanged -> {
                _projectDescState.value = addEditProjectEvents.value
            }
            is AddEditProjectEvents.ToggleCalendarVisibility -> {
                _isCalendarVisible.value = !isCalendarVisible.value
            }
            is AddEditProjectEvents.DeadlineChanged -> {
                _projectDeadlineState.value =
                    convertDateToString(addEditProjectEvents.value, "dd/MM/yyyy")
                projectDeadlineStateDb.value =
                    convertDateToString(addEditProjectEvents.value, "dd MMM yyyy")
            }
            is AddEditProjectEvents.AddEditProject -> {
                viewModelScope.launch {
                    projectsUseCases.addProjectsUseCase(
                        Project(
                            projectId = currentProjectId,
                            projectName = projectNameState.value,
                            projectDesc = projectDescState.value,
                            projectDeadline = projectDeadlineStateDb.value,
                            projectStatus = currentProjectStatus,
                            timeStamp = convertLocalDateToLong(LocalDate.now()),
                        )
                    )
                    uiEvents.emit(UIEvents.AddEditProject)
                }
            }
        }
    }
}
